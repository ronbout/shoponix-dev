// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstname String
  lastname  String
  email     String    @unique
  phone     String?
  address   String?
  address2  String?
  city      String?
  state     String?
  zip       String?
  password  String
  role      Role      @default(parent)
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store[]
  club      Club?
  parent    Parent?
}

enum Role {
  parent
  club
  admin
  root
}

model Club {
  id           String   @id @default(uuid())
  clubname     String
  billAddress  String?
  billAddress2 String?
  billCity     String?
  billState    String?
  billZip      String?
  bankIBAN     String?
  bankBIC      String?
  paid         Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  parents      Parent[]
}

model Parent {
  id        String      @id @default(uuid())
  firstname String
  lastname  String
  relation  ParentRole?
  birthday  String?
  order     Order[]
  cart      Cart[]
  club      Club?       @relation(fields: [clubId], references: [id])
  clubId    String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum ParentRole {
  Mom
  Dad
  Other
}

model Product {
  id            String          @id @default(uuid())
  name          String
  price         Decimal
  productType   String
  sku           String?         @unique
  description   String
  mediaUrl      String
  viewCount     Int?
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?
  store         Store?          @relation(fields: [storeId], references: [id])
  storeId       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orderProducts OrderProducts[]
  cartProducts  CartProducts[]

  @@index([name])
}

model Store {
  id        String      @id @default(uuid())
  name      String
  email     String
  web       String?
  aboutText String
  status    StoreStatus @default(pending)
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
  product   Product[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([name])
  @@index([email])
}

enum StoreStatus {
  pending
  approved
  declined
}

model Order {
  id            String          @id @default(uuid())
  email         String
  total         Decimal
  status        OrderStatus     @default(pending)
  parent        Parent          @relation(fields: [parentId], references: [id])
  parentId      String
  orderProducts OrderProducts[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum OrderStatus {
  pending
  delivered
}

model OrderProducts {
  id       String  @id @default(uuid())
  quantity Int
  order    Order   @relation(fields: [orderId], references: [id])
  product  Product @relation(fields: [productId], references: [id])

  productId String
  orderId   String
}

model Cart {
  id           String         @id @default(uuid())
  parent       Parent         @relation(fields: [parentId], references: [id])
  parentId     String
  cartProducts CartProducts[]
}

model CartProducts {
  id       String  @id @default(uuid())
  quantity Int
  cart     Cart    @relation(fields: [cartId], references: [id])
  product  Product @relation(fields: [productId], references: [id])

  productId String
  cartId    String
}
